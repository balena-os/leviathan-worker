ARG BALENA_ARCH=%%BALENA_ARCH%%

FROM balenalib/${BALENA_ARCH}-alpine-node:16-run-20230811 AS build-base

WORKDIR /usr/app

# hadolint ignore=DL3018
RUN apk add --no-cache libusb-dev dbus-dev python3 make build-base cmake git linux-headers eudev-dev libftdi1-dev popt-dev hidapi-dev
COPY package*.json ./

FROM build-base as node-dev

# install locked dev dependencies
RUN npm ci

COPY tsconfig.json ./
COPY typings ./typings
COPY lib ./lib
COPY bin ./bin

# build typescript
RUN npm run build

FROM build-base as node-prod

# install locked production dependencies
RUN npm ci --production

# build sdwire sdmux tooling
RUN git clone https://git.tizen.org/cgit/tools/testlab/sd-mux &&\
  mkdir sd-mux/build && cd sd-mux/build && cmake ../ && make

# install Crelay tooling
RUN git clone https://github.com/balena-io-hardware/crelay.git && \
  cd crelay/src && make [DRV_CONRAD=n] [DRV_SAINSMART=n] [DRV_HIDAPI=n] && make install

# install jetson-flash tooling
RUN git clone https://github.com/balena-os/jetson-flash.git && \
  cd jetson-flash && git checkout master

# install jetson-flash tooling
RUN git clone https://github.com/balena-os/iot-gate-imx8plus-flashtools.git && \
  cd iot-gate-imx8plus-flashtools && git checkout master

FROM balenalib/${BALENA_ARCH}-alpine-node:16-run-20230811

WORKDIR /usr/app

ENV DBUS_SYSTEM_BUS_ADDRESS unix:path=/host/run/dbus/system_bus_socket

# ovmf is only packaged for x86_64 and aarch64 so ignore failures on arm
# hadolint ignore=DL3018
RUN apk add --no-cache \
  openssh-client \
  bluez \
  socat \
  rsync \
  libusb-dev dbus-dev eudev-dev \
  gstreamer-tools gst-plugins-base gst-plugins-bad gst-plugins-good \
  bridge bridge-utils iproute2 dnsmasq iptables \
  qemu-img qemu-system-x86_64 qemu-system-aarch64 qemu-system-arm \
  python3 py3-pip py3-setuptools \
  mdadm util-linux libftdi1-dev popt-dev hidapi-dev ca-certificates docker git screen

# fail if binaries are missing or won't run
RUN dockerd --version && docker --version

# hadolint ignore=DL3018
RUN apk add --no-cache uhubctl || true

RUN pip3 install usbsdmux

# create qemu-bridge-helper ACL file
# https://wiki.qemu.org/Features/HelperNetworking
RUN mkdir -p /etc/qemu \
  && echo "allow all" > /etc/qemu/bridge.conf \
  && chmod 0640 /etc/qemu/bridge.conf

COPY --from=node-prod /usr/app/package.json ./
COPY --from=node-prod /usr/app/node_modules ./node_modules
COPY --from=node-dev /usr/app/build ./build

# Copy sdwire sdmux binary
COPY  --from=node-prod /usr/app/sd-mux/build/src/sd-mux-ctrl /usr/local/sbin/sd-mux-ctrl

# Copy crelay binary
COPY --from=node-prod /usr/app/crelay/src/crelay /usr/local/bin/crelay
RUN chmod +x /usr/local/bin/crelay

# Copy jetson-flash
COPY --from=node-prod /usr/app/jetson-flash/ /usr/app/jetson-flash

# Copy IOT-GATE flash
COPY --from=node-prod /usr/app/iot-gate-imx8plus-flashtools /usr/app/iot-gate-imx8plus-flashtools


COPY entry.sh entry.sh

CMD ["./entry.sh"]